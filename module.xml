<?xml version="1.0" encoding="utf-8"?>
<module xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:rhena:module" xmlns:prop="urn:rhena:properties" xmlns:dependency="urn:rhena:dependency"
	xsi:schemaLocation="urn:rhena:module http://schema.unnsvc.com/rhena/module.xsd">

	<meta component="com.unnsvc" version="0.0.1">

		<prop:someprop>somevalue</prop:someprop>
		<prop:anotherprop>anothervalue</prop:anotherprop>

		<lifecycle name="library">
			<!-- @TODO allow custom properties to be declared in the lifecycles -->

			<context module="com.unnsvc.rhena:lifecycle:0.0.1" class="com.unnsvc.rhena.lifecycle.DefaultContext">
				<resources>
					<main path="src/main/java" />
					<main path="src/main/resources" filter="true" />
					<test path="src/test/java" />
					<test path="src/test/resources" filter="true" />
				</resources>
			</context>

			<processor module="com.unnsvc.rhena:lifecycle:0.0.1" class="com.unnsvc.rhena.lifecycle.DefaultJavaProcessor" />
			<processor module="com.unnsvc.rhena:lifecycle:0.0.1" class="com.unnsvc.rhena.lifecycle.DefaultManifestProcessor" />

			<generator module="com.unnsvc.rhena:lifecycle:0.0.1" class="com.unnsvc.rhena.lifecycle.DefaultGenerator" />

			<!-- Example -->
			<!-- <command name="cmd1" module="com.unnsvc.rhena:lifecycle:0.0.1" class="com.unnsvc.rhena.lifecycle.Command1" /> -->
			<!-- <command name="cmd2" module="com.unnsvc.rhena:lifecycle:0.0.1" class="com.unnsvc.rhena.lifecycle.Command2" /> -->
			<!-- <command name="cmd3" module="com.unnsvc.rhena:lifecycle:0.0.1" class="com.unnsvc.rhena.lifecycle.Command3" /> -->

		</lifecycle>

	</meta>

	<!-- when declaring a dependency on another module, what we're actually saying is we are requesting the execution of this type from module -->
	<!-- <dependency:deliverable module="component2:module1:0.0.1" /> -->
	<!-- <dependency:test module="component2:module1:0.0.1" traverse="scope" /> -->
	<dependency:test module="org.junit:junit:4.12" />

</module>




